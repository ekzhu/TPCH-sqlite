[
  {
    "estimate": "The estimated running time of this query depends on the selectivity of the conditions in the WHERE clause. However, we can make some assumptions based on the size of the tables involved and the complexity of the query. \n\nAssuming that the query optimizer chooses the most efficient execution plan, we can estimate the running time as follows:\n\n- The largest table involved is LINEITEM with 6,001,215 rows. \n- The query involves several joins, which can be computationally expensive. However, the join conditions involve primary and foreign keys, which should be indexed for efficient lookups. \n- The query also involves aggregation and sorting, which can be expensive operations. However, the GROUP BY clause only groups by one column, which should be relatively fast. The ORDER BY clause sorts by a single column, which should also be relatively fast. \n\nBased on these factors, we can estimate the running time of this query to be in the range of several seconds to a few minutes.",
    "query": "SELECT n_name,\n       sum(l_extendedprice * (1 - l_discount)) AS revenue\nFROM customer,\n     orders,\n     lineitem,\n     supplier,\n     nation,\n     region\nWHERE c_custkey = o_custkey\n  AND l_orderkey = o_orderkey\n  AND l_suppkey = s_suppkey\n  AND c_nationkey = s_nationkey\n  AND s_nationkey = n_nationkey\n  AND n_regionkey = r_regionkey\n  AND r_name = 'ASIA'\n  AND o_orderdate >= '1994-01-01'\n  AND o_orderdate < '1995-01-01'\nGROUP BY n_name\nORDER BY revenue DESC\n;\n",
    "real": 2.216
  },
  {
    "estimate": "This query involves joining four tables: customer, orders, lineitem, and nation. The query filters the results based on the order date, return flag, and nation key. It then groups the results by customer key, name, account balance, phone, nation name, address, and comment. Finally, it orders the results by revenue in descending order and limits the output to the top 20 results.\n\nGiven the size of the tables involved, the complexity of the query, and the fact that it involves grouping and ordering, the estimated running time of this query could be several seconds to a few minutes. However, the actual running time may vary depending on the specific hardware and software configuration of the system running the query.",
    "query": "SELECT c_custkey,\n       c_name,\n       sum(l_extendedprice * (1 - l_discount)) AS revenue,\n       c_acctbal,\n       n_name,\n       c_address,\n       c_phone,\n       c_comment\nFROM customer,\n     orders,\n     lineitem,\n     nation\nWHERE c_custkey = o_custkey\n  AND l_orderkey = o_orderkey\n  AND o_orderdate >= '1993-10-01'\n  AND o_orderdate < '1994-01-01'\n  AND l_returnflag = 'R'\n  AND c_nationkey = n_nationkey\nGROUP BY c_custkey,\n         c_name,\n         c_acctbal,\n         c_phone,\n         n_name,\n         c_address,\n         c_comment\nORDER BY revenue DESC\nLIMIT 20 ;\n",
    "real": 1.203
  },
  {
    "estimate": "0.998",
    "query": "SELECT sum(l_extendedprice * l_discount) AS revenue\nFROM lineitem\nWHERE l_shipdate >= '1994-01-01'\n  AND l_shipdate < '1995-01-01'\n  AND l_discount BETWEEN 0.05 AND 0.07\n  AND l_quantity < 24\n;\n",
    "real": 1.014
  },
  {
    "estimate": "This query is a bit more complex than the previous ones, but we can still estimate its running time based on the operations it performs. Here's a breakdown of the query:\n\n- The query performs a join between the `partsupp` and `part` tables, filtering on several conditions (`p_brand <> 'Brand#45'`, `p_type not like 'MEDIUM POLISHED%'`, etc.).\n- It then performs a subquery to exclude certain suppliers based on a condition in the `supplier` table (`s_comment like '%Customer%Complaints%'`).\n- Finally, it groups the results by `p_brand`, `p_type`, and `p_size`, and counts the number of distinct `ps_suppkey` values for each group.\n\nBased on this breakdown, we can estimate that the query will involve several table scans and joins, as well as a subquery and a group by operation. Given the size of the tables involved, we can expect the query to take several seconds to run, possibly up to a minute or more. However, the exact running time will depend on factors such as the hardware and software configuration of the system running the query, as well as the specific implementation of SQLite being used.",
    "query": "SELECT p_brand,\n       p_type,\n       p_size,\n       count(DISTINCT ps_suppkey) AS supplier_cnt\nFROM partsupp,\n     part\nWHERE p_partkey = ps_partkey\n  AND p_brand <> 'Brand#45'\n  AND p_type not like 'MEDIUM POLISHED%'\n  AND p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n  AND ps_suppkey not in\n    (SELECT s_suppkey\n     FROM supplier\n     WHERE s_comment like '%Customer%Complaints%' )\nGROUP BY p_brand,\n         p_type,\n         p_size\nORDER BY supplier_cnt DESC,\n         p_brand,\n         p_type,\n         p_size\n;\n",
    "real": 0.326
  },
  {
    "estimate": "This query involves multiple table scans and filtering operations, so it may take some time to execute. However, without knowing the specific data distribution and indexing of the tables, it is difficult to provide an accurate estimate of the running time.",
    "query": "SELECT sum(l_extendedprice * (1 - l_discount)) AS revenue\nFROM lineitem,\n     part\nWHERE (p_partkey = l_partkey\n       AND p_brand = 'Brand#12'\n       AND p_container in ('SM CASE',\n                           'SM BOX',\n                           'SM PACK',\n                           'SM PKG')\n       AND l_quantity >= 1\n       AND l_quantity <= 11\n       AND p_size BETWEEN 1 AND 5\n       AND l_shipmode in ('AIR',\n                          'AIR REG')\n       AND l_shipinstruct = 'DELIVER IN PERSON')\n  OR (p_partkey = l_partkey\n      AND p_brand = 'Brand#23'\n      AND p_container in ('MED BAG',\n                          'MED BOX',\n                          'MED PKG',\n                          'MED PACK')\n      AND l_quantity >= 10\n      AND l_quantity <= 20\n      AND p_size BETWEEN 1 AND 10\n      AND l_shipmode in ('AIR',\n                         'AIR REG')\n      AND l_shipinstruct = 'DELIVER IN PERSON')\n  OR (p_partkey = l_partkey\n      AND p_brand = 'Brand#34'\n      AND p_container in ('LG CASE',\n                          'LG BOX',\n                          'LG PACK',\n                          'LG PKG')\n      AND l_quantity >= 20\n      AND l_quantity <= 30\n      AND p_size BETWEEN 1 AND 15\n      AND l_shipmode in ('AIR',\n                         'AIR REG')\n      AND l_shipinstruct = 'DELIVER IN PERSON')\n;\n",
    "real": 1.267
  },
  {
    "estimate": "This query involves multiple joins and a group by clause. The lineitem table has over 6 million rows, so the query may take some time to execute. However, the query is relatively simple and should not take too long to run. Based on the size of the tables and the complexity of the query, I would estimate the running time to be around 5-10 minutes. However, the actual running time may vary depending on the hardware and software configuration of the system running the query.",
    "query": "SELECT supp_nation,\n       cust_nation,\n       l_year,\n       sum(volume) AS revenue\nFROM\n  (SELECT n1.n_name AS supp_nation,\n          n2.n_name AS cust_nation,\n          strftime('%Y', l_shipdate) AS l_year,\n          l_extendedprice * (1 - l_discount) AS volume\n   FROM supplier,\n        lineitem,\n        orders,\n        customer,\n        nation n1,\n        nation n2\n   WHERE s_suppkey = l_suppkey\n     AND o_orderkey = l_orderkey\n     AND c_custkey = o_custkey\n     AND s_nationkey = n1.n_nationkey\n     AND c_nationkey = n2.n_nationkey\n     AND ((n1.n_name = 'FRANCE'\n           AND n2.n_name = 'GERMANY')\n          OR (n1.n_name = 'GERMANY'\n              AND n2.n_name = 'FRANCE'))\n     AND l_shipdate BETWEEN '1995-01-01' AND '1996-12-31' ) AS shipping\nGROUP BY supp_nation,\n         cust_nation,\n         l_year\nORDER BY supp_nation,\n         cust_nation,\n         l_year\n;\n",
    "real": 3.464
  },
  {
    "estimate": "0.982",
    "query": "SELECT c_count,\n       count(*) AS custdist\nFROM\n  (SELECT c_custkey,\n          count(o_orderkey) AS c_count\n   FROM customer\n   LEFT OUTER JOIN orders ON c_custkey = o_custkey\n   AND o_comment NOT LIKE '%special%requests%'\n   GROUP BY c_custkey)\nGROUP BY c_count\nORDER BY custdist DESC,\n         c_count DESC\n;\n",
    "real": 8.553
  },
  {
    "estimate": "This query is a bit more complex than the previous ones, but we can still estimate its running time based on the operations it performs. Here's a breakdown of the query:\n\n1. The subquery in the WHERE clause calculates the sum of quantities for each order and selects only those orders where the sum is greater than 300. This subquery will likely involve a full scan of the lineitem table, which has 6,001,215 rows.\n\n2. The main query joins the customer, orders, and lineitem tables using the selected order keys. This will involve a join between the 1.5 million rows in the orders table and the 6 million rows in the lineitem table, which could be quite expensive.\n\n3. The GROUP BY clause groups the results by customer, order, and order date, and calculates the sum of quantities and the total price for each group. This will involve sorting the results and calculating aggregates, which can be expensive.\n\n4. Finally, the results are sorted by total price and order date, and the top 100 rows are selected.\n\nBased on these operations, I would estimate that this query could take several seconds to run, possibly up to 10-20 seconds or more depending on the hardware and configuration of the database server.",
    "query": "SELECT c_name,\n       c_custkey,\n       o_orderkey,\n       o_orderdate,\n       o_totalprice,\n       sum(l_quantity) AS sum_qty\nFROM customer,\n     orders,\n     lineitem\nWHERE o_orderkey in\n    (SELECT l_orderkey\n     FROM lineitem\n     GROUP BY l_orderkey\n     HAVING sum(l_quantity) > 300)\n  AND c_custkey = o_custkey\n  AND o_orderkey = l_orderkey\nGROUP BY c_name,\n         c_custkey,\n         o_orderkey,\n         o_orderdate,\n         o_totalprice\nORDER BY o_totalprice DESC,\n         o_orderdate\nLIMIT 100\n;\n",
    "real": 0.846
  },
  {
    "estimate": "The estimated running time of this query depends on various factors such as the size of the tables involved, the available indexes, the hardware specifications of the machine running the query, etc. Therefore, it is difficult to provide an accurate estimate without more information. However, based on the complexity of the query and the size of the tables involved, it is likely to take several seconds to complete.",
    "query": "SELECT ps_partkey,\n       sum(ps_supplycost * ps_availqty) AS value\nFROM partsupp,\n     supplier,\n     nation\nWHERE ps_suppkey = s_suppkey\n  AND s_nationkey = n_nationkey\n  AND n_name = 'GERMANY'\nGROUP BY ps_partkey\nHAVING sum(ps_supplycost * ps_availqty) >\n  (SELECT sum(ps_supplycost * ps_availqty) * .0001 -- FRACTION = .0001/SF\nFROM partsupp,\n     supplier,\n     nation\n   WHERE ps_suppkey = s_suppkey\n     AND s_nationkey = n_nationkey\n     AND n_name = 'GERMANY' )\nORDER BY value DESC\n;\n",
    "real": 0.617
  },
  {
    "estimate": "0.982",
    "query": "SELECT s_acctbal,\n       s_name,\n       n_name,\n       p_partkey,\n       p_mfgr,\n       s_address,\n       s_phone,\n       s_comment\nFROM part,\n     supplier,\n     partsupp,\n     nation,\n     region\nWHERE p_partkey = ps_partkey\n  AND s_suppkey = ps_suppkey\n  AND p_size = 25 -- [SIZE]\n  AND p_type like '%BRASS' -- '%[TYPE]'\n  AND s_nationkey = n_nationkey\n  AND n_regionkey = r_regionkey\n  AND r_name = 'EUROPE' -- '[REGION]'\n  AND ps_supplycost =\n    (SELECT min(ps_supplycost)\n     FROM partsupp,\n          supplier,\n          nation,\n          region\n     WHERE p_partkey = ps_partkey\n       AND s_suppkey = ps_suppkey\n       AND s_nationkey = n_nationkey\n       AND n_regionkey = r_regionkey\n       AND r_name = 'EUROPE') -- '[REGION]' )\nORDER BY s_acctbal DESC,\n         n_name,\n         s_name,\n         p_partkey\nLIMIT 100\n;\n",
    "real": 0.298
  },
  {
    "estimate": "1.986",
    "query": "SELECT l_shipmode,\n       sum(CASE\n               WHEN o_orderpriority ='1-URGENT'\n                    OR o_orderpriority ='2-HIGH' THEN 1\n               ELSE 0\n           END) AS high_line_count,\n       sum(CASE\n               WHEN o_orderpriority <> '1-URGENT'\n                    AND o_orderpriority <> '2-HIGH' THEN 1\n               ELSE 0\n           END) AS low_line_count\nFROM orders,\n     lineitem\nWHERE o_orderkey = l_orderkey\n  AND l_shipmode in ('MAIL',\n                     'SHIP')\n  AND l_commitdate < l_receiptdate\n  AND l_shipdate < l_commitdate\n  AND l_receiptdate >= '1994-01-01'\n  AND l_receiptdate < '1995-01-01'\nGROUP BY l_shipmode\nORDER BY l_shipmode\n;\n",
    "real": 1.012
  },
  {
    "estimate": "This query involves a join between three tables and a group by operation. The size of the result set is limited to 10 rows. Based on the size of the tables and the selectivity of the conditions, I estimate the running time to be around 2-3 seconds.",
    "query": "SELECT l_orderkey,\n       sum(l_extendedprice * (1 - l_discount)) AS revenue,\n       o_orderdate,\n       o_shippriority\nFROM customer,\n     orders,\n     lineitem\nWHERE c_mktsegment = 'BUILDING'\n  AND c_custkey = o_custkey\n  AND l_orderkey = o_orderkey\n  AND o_orderdate < '1995-03-15'\n  AND l_shipdate > '1995-03-15'\nGROUP BY l_orderkey,\n         o_orderdate,\n         o_shippriority\nORDER BY revenue DESC,\n         o_orderdate\nLIMIT 10\n;\n",
    "real": 1.434
  },
  {
    "estimate": "0.987",
    "query": "SELECT s_name,\n       count(*) AS numwait\nFROM supplier,\n     lineitem l1,\n     orders,\n     nation\nWHERE s_suppkey = l1.l_suppkey\n  AND o_orderkey = l1.l_orderkey\n  AND o_orderstatus = 'F'\n  AND l1.l_receiptdate > l1.l_commitdate\n  AND EXISTS\n    (SELECT *\n     FROM lineitem l2\n     WHERE l2.l_orderkey = l1.l_orderkey\n       AND l2.l_suppkey <> l1.l_suppkey )\n  AND NOT EXISTS\n    (SELECT *\n     FROM lineitem l3\n     WHERE l3.l_orderkey = l1.l_orderkey\n       AND l3.l_suppkey <> l1.l_suppkey\n       AND l3.l_receiptdate > l3.l_commitdate )\n  AND s_nationkey = n_nationkey\n  AND n_name = 'SAUDI ARABIA'\nGROUP BY s_name\nORDER BY numwait DESC,\n         s_name\nLIMIT 100\n;\n",
    "real": 5.907
  },
  {
    "estimate": "1.987",
    "query": "SELECT o_year,\n       sum(CASE\n               WHEN nation = 'BRAZIL' THEN volume\n               ELSE 0\n           END) / sum(volume) AS mkt_share\nFROM\n  (SELECT strftime('%Y', o_orderdate) AS o_year,\n          l_extendedprice * (1 - l_discount) AS volume,\n          n2.n_name AS nation\n   FROM part,\n        supplier,\n        lineitem,\n        orders,\n        customer,\n        nation n1,\n        nation n2,\n        region\n   WHERE p_partkey = l_partkey\n     AND s_suppkey = l_suppkey\n     AND l_orderkey = o_orderkey\n     AND o_custkey = c_custkey\n     AND c_nationkey = n1.n_nationkey\n     AND n1.n_regionkey = r_regionkey\n     AND r_name = 'AMERICA'\n     AND s_nationkey = n2.n_nationkey\n     AND o_orderdate BETWEEN '1995-01-01' AND '1996-12-31'\n     AND p_type = 'ECONOMY ANODIZED STEEL' ) AS all_nations\nGROUP BY o_year\nORDER BY o_year\n;\n",
    "real": 4.989
  },
  {
    "estimate": "This query is quite complex and involves multiple joins and subqueries. The exact running time will depend on the size of the tables and the distribution of the data. However, we can estimate the running time based on the number of rows involved in each table.\n\n- PART: 200,000 rows\n- SUPPLIER: 10,000 rows\n- LINEITEM: 6,001,215 rows\n- PARTSUPP: 800,000 rows\n- ORDERS: 1,500,000 rows\n- NATION: 25 rows\n\nAssuming that the data is evenly distributed and that the query is optimized, we can estimate the running time as follows:\n\n- Joining PART and SUPPLIER: 200,000 x 10,000 = 2,000,000,000\n- Joining LINEITEM and PARTSUPP: 6,001,215 x 800,000 = 4,800,972,000,000\n- Joining ORDERS and LINEITEM: 1,500,000 x 6,001,215 = 9,001,822,500,000\n- Joining SUPPLIER and NATION: 10,000 x 25 = 250,000\n- Filtering by p_name: unknown, depends on the number of matching rows\n- Grouping by nation and o_year: unknown, depends on the number of distinct values\n\nBased on these estimates, we can expect the query to take several minutes to run, possibly even hours. However, the actual running time may vary depending on the specific data and hardware configuration.",
    "query": "SELECT nation,\n       o_year,\n       sum(amount) AS sum_profit\nFROM\n  (SELECT n_name AS nation,\n          strftime('%Y', o_orderdate) AS o_year,\n          l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount\n   FROM part,\n        supplier,\n        lineitem,\n        partsupp,\n        orders,\n        nation\n   WHERE s_suppkey = l_suppkey\n     AND ps_suppkey = l_suppkey\n     AND ps_partkey = l_partkey\n     AND p_partkey = l_partkey\n     AND o_orderkey = l_orderkey\n     AND s_nationkey = n_nationkey\n     AND p_name like '%green%' ) AS profit\nGROUP BY nation,\n         o_year\nORDER BY nation,\n         o_year DESC ;\n",
    "real": 13.113
  },
  {
    "estimate": "The estimated running time of this query depends on the size of the LINEITEM table and the number of distinct values for l_returnflag and l_linestatus. Assuming that the data is evenly distributed, we can estimate the number of distinct values for each column as follows:\n\n- l_returnflag: 2 (typically 'R' or 'A')\n- l_linestatus: 2 (typically 'F' or 'O')\n\nThe LINEITEM table has 6,001,215 rows. Therefore, the query needs to group and aggregate these rows by the combination of l_returnflag and l_linestatus, which results in 2 x 2 = 4 groups. \n\nThe estimated running time of the query can be calculated as follows:\n\n- Scan the LINEITEM table: O(N)\n- Group and aggregate the rows: O(1) per row\n- Sort the result set: O(1) per row\n\nTherefore, the overall estimated running time of the query is O(N), which is proportional to the size of the LINEITEM table. Assuming that the database is properly indexed and the hardware is adequate, the query should complete in a reasonable amount of time.",
    "query": "SELECT l_returnflag,\n       l_linestatus,\n       sum(l_quantity) AS sum_qty,\n       sum(l_extendedprice) AS sum_base_price,\n       sum(l_extendedprice*(1-l_discount)) AS sum_disc_price,\n       sum(l_extendedprice*(1-l_discount)*(1+l_tax)) AS sum_charge,\n       avg(l_quantity) AS avg_qty,\n       avg(l_extendedprice) AS avg_price,\n       avg(l_discount) AS avg_disc,\n       count(*) AS count_order\nFROM lineitem\nWHERE l_shipdate <= '1998-09-02'  -- date '1998-12-01' - interval '[DELTA=90]' DAY\nGROUP BY l_returnflag,\n         l_linestatus\nORDER BY l_returnflag,\n         l_linestatus;\n",
    "real": 5.991
  },
  {
    "estimate": "1.987",
    "query": "SELECT o_orderpriority,\n       count(*) AS order_count\nFROM orders\nWHERE o_orderdate >= '1993-07-01'\n  AND o_orderdate < '1993-10-01'\n  AND EXISTS\n    (SELECT *\n     FROM lineitem\n     WHERE l_orderkey = o_orderkey\n       AND l_commitdate < l_receiptdate )\nGROUP BY o_orderpriority\nORDER BY o_orderpriority\n;\n",
    "real": 0.366
  }
]